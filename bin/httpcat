#!/usr/bin/env bash
#
# httpcat - an http server in bash using netcat
#

httpcat() {
  
  # vars
  nc="$(nc 2>&1 | grep "usage: nc ")"
  pid="$$"
  cwd="$(pwd)"
  port="80"
  
  # cd to own dir
  cd "$(dirname "$0")"
  
  # deps
  . libargue.sh || return 1
  
  # parse arguments
  args=("$@")
  argue "-v, --version"\
        "-p, --port, +" || return 1
  
  # args & options
  www="${args[0]}"
  [ -n "${opts[0]}" ] && echo "0.0.4" && exit 0
  [ -n "${opts[1]}" ] && port="${opts[1]}"
  
  # sanity
  [ -z "$www" ] && echo "please specify a www directory" >&2 && exit 1
  [ ! -d "$www" ] && www="$cwd"/"$www"
  [ ! -d "$www" ] && echo "$www: directory does not exist" >&2 && exit 1
  
  serve
}

serve() {
  
  # make some fifos
  mkfifo request
  mkfifo response
  
  # trap ctrl-C
  trap "echo -n ' '; quit" SIGTERM SIGINT SIGQUIT SIGKILL
  
  # start listening
  echo "listening on $port"
  listen
}

listen() {
  
  # implementations may vary
  if [ -n "$nc" ]
  then
    cat response | nc -l "$port" > request & 
  else
    cat response | netcat -l -p "$port" > request &
  fi
  
  # wait for request
  handle
}

handle() {
  file=""

  # read request
  while read line
  do
    
    # extract the path requested
    [ -z "$file" ] && file="$(echo "$line" | sed "s|GET \(.*\) HTTP.*|\1|")"
    
    # log to stdout
    echo "$line"
    
    # only read up to first empty line
    test "${#line}" = 1 && break
  done < request
  
  # if we didn't get a file request, there was an error
  [ -z "$file" ] && quit 1
  
  # index?
  if [ "$file" = "/" ]; then
    file=("$www"/index*)
  else
    file="$(echo -e "$(echo "$file" | sed -e 's/%\([0-9A-F][0-9A-F]\)/\\x\1/g')")"  # urldecode
    file="${www}${file}"
  fi
  
  # respond
  if [ -e "$file" ]; then
    cat <(echo -en "HTTP/1.1 200\r\n\r\n") "$file" > response
  else
    echo -en "HTTP/1.1 404\r\n\r\n$file: file not found" > response
  fi
  
  # killing netcat seems to be the 
  # only way to close the connection
  close
  
  # start listening again
  listen
}

# kills all child processes
close() {
  while read process
  do
    child="$(echo "$process" | sed "s/[ ]*\([^ ]*\).*/\1/")"
    if [ "$child" != "$pid" ]
    then
      kill "$child" 2> /dev/null
    fi
  done < <(ps -o pid -o pgid -o command | grep "$pid")
}

quit() {
  
  # kill children
  close
  
  # remove fifos
  rm -rf request
  rm -rf response
  
  # runtime error
  [ -n "$1" ] && exit "$1"
  
  # graceful
  echo "bye!"
  exit 0
}

# run
httpcat "$@"
